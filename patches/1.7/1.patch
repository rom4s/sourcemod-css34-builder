diff --git a/AMBuildScript b/AMBuildScript
index 69675b6..9c4b452 100644
--- a/AMBuildScript
+++ b/AMBuildScript
@@ -17,6 +17,7 @@ WinLinux = ['windows', 'linux']
 WinLinuxMac = ['windows', 'linux', 'mac']
 
 PossibleSDKs = {
+  'ep1':  SDK('HL2SDK', '2.ep1', '-1', 'EP1', WinLinux, 'episode1'),
   'episode1':  SDK('HL2SDK', '1.ep1', '1', 'EPISODEONE', WinLinux, 'episode1'),
   'ep2':  SDK('HL2SDKOB', '2.ep2', '3', 'ORANGEBOX', WinLinux, 'orangebox'),
   'css':  SDK('HL2SDKCSS', '2.css', '6', 'CSS', WinLinuxMac, 'css'),
@@ -342,7 +343,7 @@ class SMConfig(object):
   def ConfigureForHL2(self, binary, sdk):
     compiler = binary.compiler
 
-    if sdk.name == 'episode1':
+    if sdk.name == 'episode1' and sdk.ext == '1.ep1':
       mms_path = os.path.join(self.mms_root, 'core-legacy')
     else:
       mms_path = os.path.join(self.mms_root, 'core')
@@ -420,7 +421,7 @@ class SMConfig(object):
           compiler.Dep(os.path.join(lib_folder, 'tier1.a')),
           compiler.Dep(os.path.join(lib_folder, 'mathlib.a'))
         ]
-      else:
+      elif sdk.name != 'episode1':
         compiler.postlink += [
           compiler.Dep(os.path.join(lib_folder, 'tier1_i486.a')),
           compiler.Dep(os.path.join(lib_folder, 'mathlib_i486.a'))
@@ -440,6 +441,8 @@ class SMConfig(object):
         dynamic_libs = ['libtier0.so', 'libvstdlib.so']
       else:
         dynamic_libs = ['tier0_i486.so', 'vstdlib_i486.so']
+      if sdk.name == 'episode1':
+        dynamic_libs += ['mathlib_i486.a', 'tier1_i486.a']
     elif builder.target_platform == 'mac':
       compiler.linkflags.append('-liconv')
       dynamic_libs = ['libtier0.dylib', 'libvstdlib.dylib']
diff --git a/configs/core.cfg b/configs/core.cfg
index c385ccf..43e86b8 100644
--- a/configs/core.cfg
+++ b/configs/core.cfg
@@ -86,7 +86,7 @@
 	 *
 	 * The default value is "no". A value of "yes" will block the Auto Updater.
 	 */
-	"DisableAutoUpdate"			"no"
+	"DisableAutoUpdate"			"yes"
 
 	/**
 	 * If set to yes, a successful gamedata update will attempt to restart SourceMod.
diff --git a/core/ChatTriggers.cpp b/core/ChatTriggers.cpp
index ab202b2..68332c3 100644
--- a/core/ChatTriggers.cpp
+++ b/core/ChatTriggers.cpp
@@ -42,7 +42,7 @@
 SH_DECL_EXTERN2_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommandContext &, const CCommand &);
 #elif SOURCE_ENGINE >= SE_ORANGEBOX
 SH_DECL_EXTERN1_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommand &);
-#elif SOURCE_ENGINE == SE_DARKMESSIAH
+#elif SOURCE_ENGINE == SE_DARKMESSIAH || SOURCE_ENGINE == SE_EP1
 SH_DECL_EXTERN0_void(ConCommand, Dispatch, SH_NOATTRIB, false);
 #else
 # if SH_IMPL_VERSION >= 4
diff --git a/core/CoreConfig.cpp b/core/CoreConfig.cpp
index 1cce9f4..3343607 100644
--- a/core/CoreConfig.cpp
+++ b/core/CoreConfig.cpp
@@ -66,7 +66,7 @@ void Hook_ExecDispatchPre(const CCommandContext &context, const CCommand &cmd)
 #elif SOURCE_ENGINE >= SE_ORANGEBOX
 SH_DECL_EXTERN1_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommand &);
 void Hook_ExecDispatchPre(const CCommand &cmd)
-#elif SOURCE_ENGINE == SE_DARKMESSIAH
+#elif SOURCE_ENGINE == SE_DARKMESSIAH || SOURCE_ENGINE == SE_EP1
 SH_DECL_EXTERN0_void(ConCommand, Dispatch, SH_NOATTRIB, false);
 void Hook_ExecDispatchPre()
 #else
diff --git a/core/NextMap.cpp b/core/NextMap.cpp
index 126f8f6..9501749 100644
--- a/core/NextMap.cpp
+++ b/core/NextMap.cpp
@@ -50,7 +50,7 @@ SH_DECL_HOOK4_void(IVEngineServer, ChangeLevel, SH_NOATTRIB, 0, const char *, co
 SH_DECL_EXTERN2_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommandContext &, const CCommand &);
 #elif SOURCE_ENGINE >= SE_ORANGEBOX
 SH_DECL_EXTERN1_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommand &);
-#elif SOURCE_ENGINE == SE_DARKMESSIAH
+#elif SOURCE_ENGINE == SE_DARKMESSIAH || SOURCE_ENGINE == SE_EP1
 SH_DECL_EXTERN0_void(ConCommand, Dispatch, SH_NOATTRIB, false);
 #else
 # if SH_IMPL_VERSION >= 4
diff --git a/core/PlayerManager.cpp b/core/PlayerManager.cpp
index 6eecbb7..1ff1a80 100644
--- a/core/PlayerManager.cpp
+++ b/core/PlayerManager.cpp
@@ -97,7 +97,7 @@ SH_DECL_HOOK1_void(IServerGameDLL, SetServerHibernation, SH_NOATTRIB, 0, bool);
 SH_DECL_EXTERN2_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommandContext &, const CCommand &);
 #elif SOURCE_ENGINE >= SE_ORANGEBOX
 SH_DECL_EXTERN1_void(ConCommand, Dispatch, SH_NOATTRIB, false, const CCommand &);
-#elif SOURCE_ENGINE == SE_DARKMESSIAH
+#elif SOURCE_ENGINE == SE_DARKMESSIAH || SOURCE_ENGINE == SE_EP1
 SH_DECL_EXTERN0_void(ConCommand, Dispatch, SH_NOATTRIB, false);
 #else
 # if SH_IMPL_VERSION >= 4
@@ -1169,6 +1169,10 @@ void PlayerManager::OnClientCommand(edict_t *pEntity)
 				" Borja \"faluco\" Ferrer, Pavol \"PM OnoTo\" Marko");
 			ClientConsolePrint(pEntity,
 				"SourceMod is open source under the GNU General Public License.");
+			ClientConsolePrint(pEntity,
+				"-----------------------------------------");
+			ClientConsolePrint(pEntity,
+				"Compiled by [U:1:102266438]");
 			RETURN_META(MRES_SUPERCEDE);
 		}
 
diff --git a/core/logic_bridge.cpp b/core/logic_bridge.cpp
index 0848cbc..d616034 100644
--- a/core/logic_bridge.cpp
+++ b/core/logic_bridge.cpp
@@ -351,7 +351,7 @@ static const char *get_source_engine_name()
 #if !defined SOURCE_ENGINE
 # error "Unknown engine type"
 #endif
-#if SOURCE_ENGINE == SE_EPISODEONE
+#if SOURCE_ENGINE == SE_EPISODEONE || SOURCE_ENGINE == SE_EP1
 	return "original";
 #elif SOURCE_ENGINE == SE_DARKMESSIAH
 	return "darkmessiah";
diff --git a/core/sm_srvcmds.cpp b/core/sm_srvcmds.cpp
index cf9355e..91dab55 100644
--- a/core/sm_srvcmds.cpp
+++ b/core/sm_srvcmds.cpp
@@ -340,6 +340,7 @@ void RootConsoleMenu::OnRootConsoleCommand(const char *cmdname, const CCommand &
 			ConsolePrint("    SourcePawn Engine: %s (build %s NO JIT)", g_pSourcePawn2->GetEngineName(), g_pSourcePawn2->GetVersionString());
 		ConsolePrint("    SourcePawn API: v1 = %d, v2 = %d", g_pSourcePawn->GetEngineAPIVersion(), g_pSourcePawn2->GetAPIVersion());
 		ConsolePrint("    Compiled on: %s", SOURCEMOD_BUILD_TIME);
+		ConsolePrint("    Compiled by: %s", "[U:1:102266438]");
 #if defined(SM_GENERATED_BUILD)
 		ConsolePrint("    Built from: https://github.com/alliedmodders/sourcemod/commit/%s", SOURCEMOD_SHA);
 		ConsolePrint("    Build ID: %s:%s", SOURCEMOD_LOCAL_REV, SOURCEMOD_SHA);
diff --git a/extensions/clientprefs/AMBuilder b/extensions/clientprefs/AMBuilder
index b30a9f0..75fcbf9 100644
--- a/extensions/clientprefs/AMBuilder
+++ b/extensions/clientprefs/AMBuilder
@@ -10,6 +10,9 @@ if binary.compiler.vendor == 'gcc' or binary.compiler.vendor == 'clang':
 elif binary.compiler.vendor == 'msvc':
   binary.compiler.cxxflags += ['/GR-']
 
+if builder.target_platform == 'linux':
+  binary.compiler.postlink += ['-lpthread', '-lrt']
+
 binary.sources += [
   'extension.cpp',
   'cookie.cpp',
diff --git a/extensions/cstrike/AMBuilder b/extensions/cstrike/AMBuilder
index 8c6fbda..0c33eb2 100644
--- a/extensions/cstrike/AMBuilder
+++ b/extensions/cstrike/AMBuilder
@@ -14,7 +14,7 @@ project.sources += [
   '../../public/asm/asm.c'
 ]
 
-for sdk_name in ['css', 'csgo']:
+for sdk_name in ['episode1', 'ep1', 'css', 'csgo']:
   if sdk_name not in SM.sdks:
     continue
   sdk = SM.sdks[sdk_name]
diff --git a/extensions/cstrike/natives.cpp b/extensions/cstrike/natives.cpp
index 75773f0..0935dc7 100644
--- a/extensions/cstrike/natives.cpp
+++ b/extensions/cstrike/natives.cpp
@@ -628,6 +628,7 @@ static cell_t CS_GetWeaponPrice(IPluginContext *pContext, const cell_t *params)
 
 static cell_t CS_GetClientClanTag(IPluginContext *pContext, const cell_t *params)
 {
+#if SOURCE_ENGINE > SE_EPISODEONE
 	static void *addr;
 	if (!addr)
 	{
@@ -663,10 +664,14 @@ static cell_t CS_GetClientClanTag(IPluginContext *pContext, const cell_t *params
 	pContext->StringToLocalUTF8(params[2], params[3], src, &len);
 
 	return len;
+#else
+  return pContext->ThrowNativeError("GetClientClanTag is not supported on this game");
+#endif
 }
 
 static cell_t CS_SetClientClanTag(IPluginContext *pContext, const cell_t *params)
 {
+#if SOURCE_ENGINE > SE_EPISODEONE
 	static ICallWrapper *pWrapper = NULL;
 
 	if (!pWrapper)
@@ -701,6 +706,9 @@ static cell_t CS_SetClientClanTag(IPluginContext *pContext, const cell_t *params
 	pWrapper->Execute(vstk, NULL);
 
 	return 1;
+#else
+  return pContext->ThrowNativeError("SetClientClanTag is not supported on this game");
+#endif
 }
 
 static cell_t CS_AliasToWeaponID(IPluginContext *pContext, const cell_t *params)
@@ -867,6 +875,7 @@ static cell_t CS_IsValidWeaponID(IPluginContext *pContext, const cell_t *params)
 	return IsValidWeaponID(params[1]) ? 1 : 0;
 }
 
+#if SOURCE_ENGINE > SE_EPISODEONE
 template <typename T>
 static inline T *GetPlayerVarAddressOrError(const char *pszGamedataName, IPluginContext *pContext, CBaseEntity *pPlayerEntity)
 {
@@ -952,15 +961,24 @@ static inline cell_t SetPlayerVar(IPluginContext *pContext, const cell_t *params
 
 	return 0;
 }
+#endif
 
 static cell_t CS_SetMVPCount(IPluginContext *pContext, const cell_t *params)
 {
+#if SOURCE_ENGINE > SE_EPISODEONE
 	return SetPlayerVar<int>(pContext, params, "MVPs");
+#else
+  return pContext->ThrowNativeError("SetMVPCount is not supported on this game");
+#endif
 }
 
 static cell_t CS_GetMVPCount(IPluginContext *pContext, const cell_t *params)
 {
+#if SOURCE_ENGINE > SE_EPISODEONE
 	return GetPlayerVar<int>(pContext, params, "MVPs");
+#else
+  return pContext->ThrowNativeError("GetMVPCount is not supported on this game");
+#endif
 }
 
 static cell_t CS_SetClientContributionScore(IPluginContext *pContext, const cell_t *params)
diff --git a/extensions/mysql/AMBuilder b/extensions/mysql/AMBuilder
index 0551ef9..57d2c7c 100644
--- a/extensions/mysql/AMBuilder
+++ b/extensions/mysql/AMBuilder
@@ -20,7 +20,7 @@ if SM.mysql_root:
       '-lm',
     ]
   if builder.target_platform == 'linux':
-    binary.compiler.postlink += ['-lrt']
+    binary.compiler.postlink += ['-lrt', '-lstdc++']
   elif builder.target_platform == 'windows':
     binary.compiler.postlink += [
       os.path.join(SM.mysql_root, 'lib', 'opt', 'mysqlclient.lib'),
diff --git a/plugins/include/cstrike.inc b/plugins/include/cstrike.inc
index c29e144..f886890 100644
--- a/plugins/include/cstrike.inc
+++ b/plugins/include/cstrike.inc
@@ -50,7 +50,7 @@
 
 enum CSRoundEndReason
 {
-	CSRoundEnd_TargetBombed = 0,           /**< Target Successfully Bombed! */
+	CSRoundEnd_TargetBombed = 1,           /**< Target Successfully Bombed! */
 	CSRoundEnd_VIPEscaped,                 /**< The VIP has escaped! - Doesn't exist on CS:GO */
 	CSRoundEnd_VIPKilled,                  /**< VIP has been assassinated! - Doesn't exist on CS:GO */
 	CSRoundEnd_TerroristsEscaped,          /**< The terrorists have escaped! */
